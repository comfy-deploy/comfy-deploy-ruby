# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Machines
    extend T::Sig


    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(request: T.nilable(::OpenApiSDK::Operations::PostGpuEventRequestBody)).returns(::OpenApiSDK::Operations::PostGpuEventResponse) }
    def post_gpu_event(request)
      # post_gpu_event - Register a machine event
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/gpu_event"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json;q=1, text/plain;q=0'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PostGpuEventResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PostGpuEventResponseBody)
          res.two_hundred_application_json_object = out
        end
      elsif r.status == 401
        res.four_hundred_and_one_text_plain_res = r.env.response_body if Utils.match_content_type(content_type, 'text/plain')
      
      elsif r.status == 500
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PostGpuEventMachinesResponseBody)
          res.five_hundred_application_json_object = out
        end
      end
      res
    end


    sig { params(page: T.nilable(::String), page_size: T.nilable(::String), fields_: T.nilable(::OpenApiSDK::Operations::Fields)).returns(::OpenApiSDK::Operations::GetV1MachinesResponse) }
    def get_v1_machines(page = nil, page_size = nil, fields_ = nil)
      # get_v1_machines - Retrieve all machines for a user
      # Retrieve details of all machines for the authenticated user, with pagination and optional field selection
      request = ::OpenApiSDK::Operations::GetV1MachinesRequest.new(
        
        page: page,
        page_size: page_size,
        fields_: fields_
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/v1/machines"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::GetV1MachinesRequest, request)
      headers['Accept'] = 'application/json;q=1, text/plain;q=0'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1MachinesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::GetV1MachinesResponseBody)
          res.two_hundred_application_json_object = out
        end
      elsif r.status == 400
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::GetV1MachinesMachinesResponseBody)
          res.four_hundred_application_json_object = out
        end
      elsif r.status == 401
        res.four_hundred_and_one_text_plain_res = r.env.response_body if Utils.match_content_type(content_type, 'text/plain')
      
      end
      res
    end


    sig { params(request: T.nilable(::OpenApiSDK::Operations::PostV1MachinesRequestBody)).returns(::OpenApiSDK::Operations::PostV1MachinesResponse) }
    def post_v1_machines(request)
      # post_v1_machines - Create a new machine
      # Create a new machine with optional default setting
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/v1/machines"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json;q=1, text/plain;q=0'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PostV1MachinesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PostV1MachinesResponseBody)
          res.two_hundred_application_json_object = out
        end
      elsif r.status == 400
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PostV1MachinesMachinesResponseBody)
          res.four_hundred_application_json_object = out
        end
      elsif r.status == 401
        res.four_hundred_and_one_text_plain_res = r.env.response_body if Utils.match_content_type(content_type, 'text/plain')
      
      end
      res
    end


    sig { params(machine_id: ::String, ext_urls: T.nilable(::String)).returns(::OpenApiSDK::Operations::GetV1MachinesMachineIdResponse) }
    def get_v1_machines_machine_id_(machine_id, ext_urls = nil)
      # get_v1_machines_machine_id_ - Retrieve a specific machine by ID
      # Retrieve details of a specific machine by its ID, with optional workspace details
      request = ::OpenApiSDK::Operations::GetV1MachinesMachineIdRequest.new(
        
        machine_id: machine_id,
        ext_urls: ext_urls
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1MachinesMachineIdRequest,
        base_url,
        '/v1/machines/{machine_id}',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::GetV1MachinesMachineIdRequest, request)
      headers['Accept'] = 'application/json;q=1, text/plain;q=0'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1MachinesMachineIdResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::GetV1MachinesMachineIdResponseBody)
          res.two_hundred_application_json_object = out
        end
      elsif r.status == 400
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::GetV1MachinesMachineIdMachinesResponseBody)
          res.four_hundred_application_json_object = out
        end
      elsif r.status == 401
        res.four_hundred_and_one_text_plain_res = r.env.response_body if Utils.match_content_type(content_type, 'text/plain')
      
      end
      res
    end
  end
end
