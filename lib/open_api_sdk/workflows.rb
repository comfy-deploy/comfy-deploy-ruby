# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Workflows
    extend T::Sig


    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(request: T.nilable(::OpenApiSDK::Operations::PostMachineEndpointRequestBody)).returns(::OpenApiSDK::Operations::PostMachineEndpointResponse) }
    def post_machine_endpoint(request)
      # post_machine_endpoint - Create an endpoint for a machine
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/machine-endpoint"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json;q=1, text/plain;q=0'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PostMachineEndpointResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PostMachineEndpointResponseBody)
          res.two_hundred_application_json_object = out
        end
      elsif r.status == 401
        res.four_hundred_and_one_text_plain_res = r.env.response_body if Utils.match_content_type(content_type, 'text/plain')
      elsif r.status == 500
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PostMachineEndpointWorkflowsResponseBody)
          res.five_hundred_application_json_object = out
        end
      end

      res
    end


    sig { params(request: T.nilable(::OpenApiSDK::Operations::PostV1WorkflowsRequestBody)).returns(::OpenApiSDK::Operations::PostV1WorkflowsResponse) }
    def create(request)
      # create - Create a new workflow
      # Create a new workflow by analyzing the provided workflow JSON
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/v1/workflows"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json;q=1, text/plain;q=0'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PostV1WorkflowsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PostV1WorkflowsResponseBody)
          res.two_hundred_application_json_object = out
        end
      elsif r.status == 400
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PostV1WorkflowsWorkflowsResponseBody)
          res.four_hundred_application_json_object = out
        end
      elsif r.status == 401
        res.four_hundred_and_one_text_plain_res = r.env.response_body if Utils.match_content_type(content_type, 'text/plain')
      end

      res
    end


    sig { params(page: T.nilable(::String), page_size: T.nilable(::String), search: T.nilable(::String)).returns(::OpenApiSDK::Operations::GetV1WorkflowsResponse) }
    def get_all(page = nil, page_size = nil, search = nil)
      # get_all - Retrieve workflows
      # Retrieve workflows based on optional query parameters
      request = ::OpenApiSDK::Operations::GetV1WorkflowsRequest.new(
        
        page: page,
        page_size: page_size,
        search: search
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/v1/workflows"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::GetV1WorkflowsRequest, request)
      headers['Accept'] = 'application/json;q=1, text/plain;q=0'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1WorkflowsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::OpenApiSDK::Operations::GetV1WorkflowsWorkflowsResponseBody])
          res.response_bodies = out
        end
      elsif r.status == 400
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::GetV1WorkflowsResponseBody)
          res.object = out
        end
      elsif r.status == 401
        res.res = r.env.response_body if Utils.match_content_type(content_type, 'text/plain')
      end

      res
    end


    sig { params(workflow_id: ::String).returns(::OpenApiSDK::Operations::GetV1WorkflowsWorkflowIdResponse) }
    def get(workflow_id)
      # get - Retrieve a specific workflow by ID
      # Retrieve the latest version of a specific workflow by its ID
      request = ::OpenApiSDK::Operations::GetV1WorkflowsWorkflowIdRequest.new(
        
        workflow_id: workflow_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1WorkflowsWorkflowIdRequest,
        base_url,
        '/v1/workflows/{workflow_id}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json;q=1, text/plain;q=0'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1WorkflowsWorkflowIdResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::GetV1WorkflowsWorkflowIdResponseBody)
          res.two_hundred_application_json_object = out
        end
      elsif r.status == 400
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::GetV1WorkflowsWorkflowIdWorkflowsResponseBody)
          res.four_hundred_application_json_object = out
        end
      elsif r.status == 401
        res.four_hundred_and_one_text_plain_res = r.env.response_body if Utils.match_content_type(content_type, 'text/plain')
      end

      res
    end


    sig { params(request: T.nilable(::OpenApiSDK::Operations::GetV1WorkflowsWorkflowIdOutputsRequest)).returns(::OpenApiSDK::Operations::GetV1WorkflowsWorkflowIdOutputsResponse) }
    def get_outputs(request)
      # get_outputs - Retrieve the most recent outputs for a workflow
      # Retrieve the latest version of a specific workflow by its ID
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1WorkflowsWorkflowIdOutputsRequest,
        base_url,
        '/v1/workflows/{workflow_id}/outputs',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::GetV1WorkflowsWorkflowIdOutputsRequest, request)
      headers['Accept'] = 'application/json;q=1, text/plain;q=0'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1WorkflowsWorkflowIdOutputsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::GetV1WorkflowsWorkflowIdOutputsResponseBody)
          res.two_hundred_application_json_object = out
        end
      elsif r.status == 400
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::GetV1WorkflowsWorkflowIdOutputsWorkflowsResponseBody)
          res.four_hundred_application_json_object = out
        end
      elsif r.status == 401
        res.four_hundred_and_one_text_plain_res = r.env.response_body if Utils.match_content_type(content_type, 'text/plain')
      end

      res
    end
  end
end
