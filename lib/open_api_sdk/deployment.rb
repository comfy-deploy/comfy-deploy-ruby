# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Deployment
    extend T::Sig


    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(id: ::String).returns(::OpenApiSDK::Operations::GetDeploymentIdInputsResponse) }
    def get_input_definition(id)
      # get_input_definition - Get comfyui workflow inputs definition
      # Use this to retrieve comfyui workflow inputs definition by id
      request = ::OpenApiSDK::Operations::GetDeploymentIdInputsRequest.new(
        
        id: id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetDeploymentIdInputsRequest,
        base_url,
        '/deployment/{id}/inputs',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json;q=1, text/plain;q=0'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetDeploymentIdInputsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::OpenApiSDK::Operations::ResponseBody])
          res.response_bodies = out
        end
      elsif r.status == 401
        res.res = r.env.response_body if Utils.match_content_type(content_type, 'text/plain')
      elsif r.status == 500
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::GetDeploymentIdInputsResponseBody)
          res.object = out
        end
      end

      res
    end


    sig { params(environment: T.nilable(::OpenApiSDK::Operations::Environment)).returns(::OpenApiSDK::Operations::GetDeploymentResponse) }
    def get(environment = nil)
      # get - Get all deployed workflows
      # Get all deployed workflows
      request = ::OpenApiSDK::Operations::GetDeploymentRequest.new(
        
        environment: environment
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/deployment"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::GetDeploymentRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetDeploymentResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::OpenApiSDK::Operations::GetDeploymentDeploymentResponseBody])
          res.response_bodies = out
        end
      elsif r.status == 500
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::GetDeploymentResponseBody)
          res.object = out
        end
      end

      res
    end
  end
end
