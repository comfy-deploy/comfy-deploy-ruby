# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Operations
  

    class GetV1WorkflowsWorkflowsResponseBody < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :count, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('count') } }

      field :deployments, T::Array[::Object], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('deployments') } }

      field :id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }

      field :name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('name') } }

      field :runs, T::Array[::Object], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('runs') } }

      field :selected_machine_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('selected_machine_id') } }

      field :updated_at, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('updated_at') } }

      field :user, ::OpenApiSDK::Operations::User, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('user') } }

      field :versions, T::Array[::OpenApiSDK::Operations::Versions], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('versions') } }


      sig { params(count: ::String, deployments: T::Array[::Object], id: ::String, name: ::String, runs: T::Array[::Object], selected_machine_id: ::String, updated_at: ::String, user: ::OpenApiSDK::Operations::User, versions: T::Array[::OpenApiSDK::Operations::Versions]).void }
      def initialize(count: nil, deployments: nil, id: nil, name: nil, runs: nil, selected_machine_id: nil, updated_at: nil, user: nil, versions: nil)
        @count = count
        @deployments = deployments
        @id = id
        @name = name
        @runs = runs
        @selected_machine_id = selected_machine_id
        @updated_at = updated_at
        @user = user
        @versions = versions
      end
    end
  end
end
