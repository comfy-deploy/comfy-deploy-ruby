# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Operations
  
    # Machine created successfully
    class PostV1MachinesResponseBody < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :allow_background_volume_commits, T::Boolean, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('allow_background_volume_commits') } }

      field :allow_concurrent_inputs, ::Float, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('allow_concurrent_inputs') } }

      field :base_docker_image, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('base_docker_image') } }

      field :build_log, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('build_log') } }

      field :build_machine_instance_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('build_machine_instance_id') } }

      field :concurrency_limit, ::Float, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('concurrency_limit') } }

      field :created_at, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('created_at') } }

      field :deleted, T::Boolean, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('deleted') } }

      field :disabled, T::Boolean, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('disabled') } }

      field :endpoint, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('endpoint') } }

      field :gpu, ::OpenApiSDK::Operations::PostV1MachinesGpu, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('gpu'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Operations::PostV1MachinesGpu, false) } }

      field :gpu_workspace, T::Boolean, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('gpu_workspace') } }

      field :id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }

      field :idle_timeout, ::Float, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('idle_timeout') } }

      field :install_custom_node_with_gpu, T::Boolean, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('install_custom_node_with_gpu') } }

      field :keep_warm, ::Float, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('keep_warm') } }

      field :legacy_mode, T::Boolean, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('legacy_mode') } }

      field :machine_builder_version, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('machine_builder_version') } }

      field :machine_version, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('machine_version') } }

      field :modal_app_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('modal_app_id') } }

      field :models, T::Array[::Object], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('models') } }

      field :name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('name') } }

      field :org_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('org_id') } }

      field :pod_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('pod_id') } }

      field :run_timeout, ::Float, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('run_timeout') } }

      field :status, ::OpenApiSDK::Operations::PostV1MachinesStatus, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Operations::PostV1MachinesStatus, false) } }

      field :target_workflow_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('target_workflow_id') } }

      field :type, ::OpenApiSDK::Operations::PostV1MachinesType, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Operations::PostV1MachinesType, false) } }

      field :updated_at, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('updated_at') } }

      field :user_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('user_id') } }

      field :ws_timeout, ::Float, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('ws_timeout') } }

      field :dependencies, T.nilable(::Object), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('dependencies') } }

      field :docker_command_steps, T.nilable(::Object), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('docker_command_steps') } }

      field :extra_docker_commands, T.nilable(::Object), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('extra_docker_commands') } }

      field :object_info, T.nilable(::Object), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('object_info') } }

      field :snapshot, T.nilable(::Object), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('snapshot') } }

      field :ws_gpu, T.nilable(::Object), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('ws_gpu') } }


      sig { params(allow_background_volume_commits: T::Boolean, allow_concurrent_inputs: ::Float, base_docker_image: ::String, build_log: ::String, build_machine_instance_id: ::String, concurrency_limit: ::Float, created_at: ::String, deleted: T::Boolean, disabled: T::Boolean, endpoint: ::String, gpu: ::OpenApiSDK::Operations::PostV1MachinesGpu, gpu_workspace: T::Boolean, id: ::String, idle_timeout: ::Float, install_custom_node_with_gpu: T::Boolean, keep_warm: ::Float, legacy_mode: T::Boolean, machine_builder_version: ::String, machine_version: ::String, modal_app_id: ::String, models: T::Array[::Object], name: ::String, org_id: ::String, pod_id: ::String, run_timeout: ::Float, status: ::OpenApiSDK::Operations::PostV1MachinesStatus, target_workflow_id: ::String, type: ::OpenApiSDK::Operations::PostV1MachinesType, updated_at: ::String, user_id: ::String, ws_timeout: ::Float, dependencies: T.nilable(::Object), docker_command_steps: T.nilable(::Object), extra_docker_commands: T.nilable(::Object), object_info: T.nilable(::Object), snapshot: T.nilable(::Object), ws_gpu: T.nilable(::Object)).void }
      def initialize(allow_background_volume_commits: nil, allow_concurrent_inputs: nil, base_docker_image: nil, build_log: nil, build_machine_instance_id: nil, concurrency_limit: nil, created_at: nil, deleted: nil, disabled: nil, endpoint: nil, gpu: nil, gpu_workspace: nil, id: nil, idle_timeout: nil, install_custom_node_with_gpu: nil, keep_warm: nil, legacy_mode: nil, machine_builder_version: nil, machine_version: nil, modal_app_id: nil, models: nil, name: nil, org_id: nil, pod_id: nil, run_timeout: nil, status: nil, target_workflow_id: nil, type: nil, updated_at: nil, user_id: nil, ws_timeout: nil, dependencies: nil, docker_command_steps: nil, extra_docker_commands: nil, object_info: nil, snapshot: nil, ws_gpu: nil)
        @allow_background_volume_commits = allow_background_volume_commits
        @allow_concurrent_inputs = allow_concurrent_inputs
        @base_docker_image = base_docker_image
        @build_log = build_log
        @build_machine_instance_id = build_machine_instance_id
        @concurrency_limit = concurrency_limit
        @created_at = created_at
        @deleted = deleted
        @disabled = disabled
        @endpoint = endpoint
        @gpu = gpu
        @gpu_workspace = gpu_workspace
        @id = id
        @idle_timeout = idle_timeout
        @install_custom_node_with_gpu = install_custom_node_with_gpu
        @keep_warm = keep_warm
        @legacy_mode = legacy_mode
        @machine_builder_version = machine_builder_version
        @machine_version = machine_version
        @modal_app_id = modal_app_id
        @models = models
        @name = name
        @org_id = org_id
        @pod_id = pod_id
        @run_timeout = run_timeout
        @status = status
        @target_workflow_id = target_workflow_id
        @type = type
        @updated_at = updated_at
        @user_id = user_id
        @ws_timeout = ws_timeout
        @dependencies = dependencies
        @docker_command_steps = docker_command_steps
        @extra_docker_commands = extra_docker_commands
        @object_info = object_info
        @snapshot = snapshot
        @ws_gpu = ws_gpu
      end
    end
  end
end
